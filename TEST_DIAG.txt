===== TEST PASSED: ./test/generator/1
===== TEST PASSED: ./test/generator/1-2
===== TEST PASSED: ./test/generator/10
_________________________________

TEST FAILED     : 11

compiler output :  
=================
0: inP: [], outP: [], use: [], def: [], in: [], out: []
1: inP: [], outP: [], use: [t, _obj], def: [], in: [t, _obj], out: []
2: inP: [], outP: [], use: [], def: [], in: [], out: []
3: inP: [], outP: [], use: [t, _obj], def: [], in: [t, _obj], out: []
4: inP: [], outP: [], use: [], def: [], in: [], out: []
5: inP: [], outP: [], use: [t, _obj], def: [], in: [t, _obj], out: []
6: inP: [], outP: [], use: [], def: [], in: [], out: []
7: inP: [], outP: [], use: [t, _obj], def: [], in: [t, _obj], out: []
8: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [], outP: [], use: [], def: [], in: [t, _obj], out: [t, _obj]
1: inP: [t, _obj], outP: [], use: [t, _obj], def: [], in: [t, _obj], out: []
2: inP: [], outP: [], use: [], def: [], in: [t, _obj], out: [t, _obj]
3: inP: [t, _obj], outP: [], use: [t, _obj], def: [], in: [t, _obj], out: []
4: inP: [], outP: [], use: [], def: [], in: [t, _obj], out: [t, _obj]
5: inP: [t, _obj], outP: [], use: [t, _obj], def: [], in: [t, _obj], out: []
6: inP: [], outP: [], use: [], def: [], in: [t, _obj], out: [t, _obj]
7: inP: [t, _obj], outP: [], use: [t, _obj], def: [], in: [t, _obj], out: []
8: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [t, _obj], outP: [t, _obj], use: [], def: [], in: [t, _obj], out: [t, _obj]
1: inP: [t, _obj], outP: [], use: [t, _obj], def: [], in: [t, _obj], out: []
2: inP: [t, _obj], outP: [t, _obj], use: [], def: [], in: [t, _obj], out: [t, _obj]
3: inP: [t, _obj], outP: [], use: [t, _obj], def: [], in: [t, _obj], out: []
4: inP: [t, _obj], outP: [t, _obj], use: [], def: [], in: [t, _obj], out: [t, _obj]
5: inP: [t, _obj], outP: [], use: [t, _obj], def: [], in: [t, _obj], out: []
6: inP: [t, _obj], outP: [t, _obj], use: [], def: [], in: [t, _obj], out: [t, _obj]
7: inP: [t, _obj], outP: [], use: [t, _obj], def: [], in: [t, _obj], out: []
8: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [], outP: [], use: [], def: [], in: [], out: []
1: inP: [], outP: [], use: [t1, t2, _obj], def: [], in: [t1, t2, _obj], out: []
2: inP: [], outP: [], use: [], def: [], in: [], out: []
3: inP: [], outP: [], use: [t1, t2, _obj], def: [], in: [t1, t2, _obj], out: []
4: inP: [], outP: [], use: [], def: [], in: [], out: []
5: inP: [], outP: [], use: [t1, t2, _obj], def: [], in: [t1, t2, _obj], out: []
6: inP: [], outP: [], use: [], def: [], in: [], out: []
7: inP: [], outP: [], use: [t1, t2, _obj], def: [], in: [t1, t2, _obj], out: []
8: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [], outP: [], use: [], def: [], in: [t1, t2, _obj], out: [t1, t2, _obj]
1: inP: [t1, t2, _obj], outP: [], use: [t1, t2, _obj], def: [], in: [t1, t2, _obj], out: []
2: inP: [], outP: [], use: [], def: [], in: [t1, t2, _obj], out: [t1, t2, _obj]
3: inP: [t1, t2, _obj], outP: [], use: [t1, t2, _obj], def: [], in: [t1, t2, _obj], out: []
4: inP: [], outP: [], use: [], def: [], in: [t1, t2, _obj], out: [t1, t2, _obj]
5: inP: [t1, t2, _obj], outP: [], use: [t1, t2, _obj], def: [], in: [t1, t2, _obj], out: []
6: inP: [], outP: [], use: [], def: [], in: [t1, t2, _obj], out: [t1, t2, _obj]
7: inP: [t1, t2, _obj], outP: [], use: [t1, t2, _obj], def: [], in: [t1, t2, _obj], out: []
8: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [t1, t2, _obj], outP: [t1, t2, _obj], use: [], def: [], in: [t1, t2, _obj], out: [t1, t2, _obj]
1: inP: [t1, t2, _obj], outP: [], use: [t1, t2, _obj], def: [], in: [t1, t2, _obj], out: []
2: inP: [t1, t2, _obj], outP: [t1, t2, _obj], use: [], def: [], in: [t1, t2, _obj], out: [t1, t2, _obj]
3: inP: [t1, t2, _obj], outP: [], use: [t1, t2, _obj], def: [], in: [t1, t2, _obj], out: []
4: inP: [t1, t2, _obj], outP: [t1, t2, _obj], use: [], def: [], in: [t1, t2, _obj], out: [t1, t2, _obj]
5: inP: [t1, t2, _obj], outP: [], use: [t1, t2, _obj], def: [], in: [t1, t2, _obj], out: []
6: inP: [t1, t2, _obj], outP: [t1, t2, _obj], use: [], def: [], in: [t1, t2, _obj], out: [t1, t2, _obj]
7: inP: [t1, t2, _obj], outP: [], use: [t1, t2, _obj], def: [], in: [t1, t2, _obj], out: []
8: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [], outP: [], use: [t, _obj], def: [], in: [t, _obj], out: []
0: inP: [t, _obj], outP: [], use: [t, _obj], def: [], in: [t, _obj], out: []
0: inP: [], outP: [], use: [t1, t2, _obj], def: [], in: [t1, t2, _obj], out: []
0: inP: [t1, t2, _obj], outP: [], use: [t1, t2, _obj], def: [], in: [t1, t2, _obj], out: []
0: inP: [], outP: [], use: [t, _obj], def: [], in: [t, _obj], out: []
0: inP: [t, _obj], outP: [], use: [t, _obj], def: [], in: [t, _obj], out: []
0: inP: [], outP: [], use: [t1, t2, _obj], def: [], in: [t1, t2, _obj], out: []
0: inP: [t1, t2, _obj], outP: [], use: [t1, t2, _obj], def: [], in: [t1, t2, _obj], out: []
0: inP: [], outP: [], use: [t, _obj], def: [], in: [t, _obj], out: []
0: inP: [t, _obj], outP: [], use: [t, _obj], def: [], in: [t, _obj], out: []
0: inP: [], outP: [], use: [t1, t2, _obj], def: [], in: [t1, t2, _obj], out: []
0: inP: [t1, t2, _obj], outP: [], use: [t1, t2, _obj], def: [], in: [t1, t2, _obj], out: []
0: inP: [], outP: [], use: [], def: [ret], in: [], out: []
1: inP: [], outP: [], use: [], def: [x], in: [], out: []
2: inP: [], outP: [], use: [t, ret], def: [ret], in: [t, ret], out: []
3: inP: [], outP: [], use: [ret], def: [], in: [ret], out: []
0: inP: [], outP: [], use: [], def: [ret], in: [], out: []
1: inP: [], outP: [], use: [], def: [x], in: [t, ret], out: [t, ret]
2: inP: [t, ret], outP: [], use: [t, ret], def: [ret], in: [t, ret], out: [t, ret]
3: inP: [ret], outP: [], use: [ret], def: [], in: [ret], out: []
0: inP: [], outP: [], use: [], def: [ret], in: [t], out: [t, ret]
1: inP: [t, ret], outP: [t, ret], use: [], def: [x], in: [t, ret], out: [t, ret]
2: inP: [t, ret], outP: [t, ret], use: [t, ret], def: [ret], in: [t, ret], out: [t, ret]
3: inP: [ret], outP: [], use: [ret], def: [], in: [ret], out: []
0: inP: [t], outP: [t, ret], use: [], def: [ret], in: [t], out: [t, ret]
1: inP: [t, ret], outP: [t, ret], use: [], def: [x], in: [t, ret], out: [t, ret]
2: inP: [t, ret], outP: [t, ret], use: [t, ret], def: [ret], in: [t, ret], out: [t, ret]
3: inP: [ret], outP: [], use: [ret], def: [], in: [ret], out: []
0: inP: [], outP: [], use: [t1, t2, _obj], def: [], in: [t1, t2, _obj], out: []
0: inP: [t1, t2, _obj], outP: [], use: [t1, t2, _obj], def: [], in: [t1, t2, _obj], out: []
0: inP: [], outP: [], use: [], def: [ret], in: [], out: []
1: inP: [], outP: [], use: [], def: [_swag_int_swag_], in: [], out: []
2: inP: [], outP: [], use: [input], def: [i], in: [input], out: []
3: inP: [], outP: [], use: [], def: [e], in: [], out: []
4: inP: [], outP: [], use: [e, i, ret], def: [ret], in: [e, i, ret], out: []
5: inP: [], outP: [], use: [e, i, ret], def: [ret], in: [e, i, ret], out: []
6: inP: [], outP: [], use: [], def: [c], in: [], out: []
7: inP: [], outP: [], use: [c, i, ret], def: [ret], in: [c, i, ret], out: []
8: inP: [], outP: [], use: [c, i, ret], def: [ret], in: [c, i, ret], out: []
9: inP: [], outP: [], use: [], def: [_swag_do_swag_], in: [], out: []
10: inP: [], outP: [], use: [i, ret, _swag_do_swag_], def: [ret], in: [i, ret, _swag_do_swag_], out: []
11: inP: [], outP: [], use: [i, ret, _swag_do_swag_], def: [ret], in: [i, ret, _swag_do_swag_], out: []
12: inP: [], outP: [], use: [_swag_int_swag_], def: [dy], in: [_swag_int_swag_], out: []
13: inP: [], outP: [], use: [i, dy, ret], def: [ret], in: [i, dy, ret], out: []
14: inP: [], outP: [], use: [i, dy, ret], def: [ret], in: [i, dy, ret], out: []
15: inP: [], outP: [], use: [_swag_int_swag_], def: [_swag_int_swag_], in: [input, _swag_int_swag_], out: [input]
16: inP: [], outP: [], use: [ret], def: [], in: [ret], out: []
0: inP: [], outP: [], use: [], def: [ret], in: [], out: []
1: inP: [], outP: [], use: [], def: [_swag_int_swag_], in: [input], out: [input]
2: inP: [input], outP: [], use: [input], def: [i], in: [ret, input], out: [ret]
3: inP: [], outP: [], use: [], def: [e], in: [i, ret], out: [e, i, ret]
4: inP: [e, i, ret], outP: [], use: [e, i, ret], def: [ret], in: [e, i, ret], out: [e, i, ret]
5: inP: [e, i, ret], outP: [], use: [e, i, ret], def: [ret], in: [e, i, ret], out: []
6: inP: [], outP: [], use: [], def: [c], in: [i, ret], out: [c, i, ret]
7: inP: [c, i, ret], outP: [], use: [c, i, ret], def: [ret], in: [c, i, ret], out: [c, i, ret]
8: inP: [c, i, ret], outP: [], use: [c, i, ret], def: [ret], in: [c, i, ret], out: []
9: inP: [], outP: [], use: [], def: [_swag_do_swag_], in: [i, ret], out: [i, ret, _swag_do_swag_]
10: inP: [i, ret, _swag_do_swag_], outP: [], use: [i, ret, _swag_do_swag_], def: [ret], in: [i, ret, _swag_do_swag_], out: [i, ret, _swag_do_swag_]
11: inP: [i, ret, _swag_do_swag_], outP: [], use: [i, ret, _swag_do_swag_], def: [ret], in: [i, ret, _swag_int_swag_, _swag_do_swag_], out: [_swag_int_swag_]
12: inP: [_swag_int_swag_], outP: [], use: [_swag_int_swag_], def: [dy], in: [i, ret, _swag_int_swag_], out: [i, dy, ret]
13: inP: [i, dy, ret], outP: [], use: [i, dy, ret], def: [ret], in: [i, dy, ret], out: [i, dy, ret]
14: inP: [i, dy, ret], outP: [], use: [i, dy, ret], def: [ret], in: [i, dy, ret, input, _swag_int_swag_], out: [input, _swag_int_swag_]
15: inP: [input, _swag_int_swag_], outP: [input], use: [_swag_int_swag_], def: [_swag_int_swag_], in: [ret, input, _swag_int_swag_], out: [ret, input]
16: inP: [ret], outP: [], use: [ret], def: [], in: [ret], out: []
0: inP: [], outP: [], use: [], def: [ret], in: [input], out: [input]
1: inP: [input], outP: [input], use: [], def: [_swag_int_swag_], in: [ret, input], out: [ret, input]
2: inP: [ret, input], outP: [ret], use: [input], def: [i], in: [ret, input], out: [i, ret]
3: inP: [i, ret], outP: [e, i, ret], use: [], def: [e], in: [i, ret], out: [e, i, ret]
4: inP: [e, i, ret], outP: [e, i, ret], use: [e, i, ret], def: [ret], in: [e, i, ret], out: [e, i, ret]
5: inP: [e, i, ret], outP: [], use: [e, i, ret], def: [ret], in: [e, i, ret], out: [i, ret]
6: inP: [i, ret], outP: [c, i, ret], use: [], def: [c], in: [i, ret], out: [c, i, ret]
7: inP: [c, i, ret], outP: [c, i, ret], use: [c, i, ret], def: [ret], in: [c, i, ret], out: [c, i, ret]
8: inP: [c, i, ret], outP: [], use: [c, i, ret], def: [ret], in: [c, i, ret], out: [i, ret]
9: inP: [i, ret], outP: [i, ret, _swag_do_swag_], use: [], def: [_swag_do_swag_], in: [i, ret], out: [i, ret, _swag_do_swag_]
10: inP: [i, ret, _swag_do_swag_], outP: [i, ret, _swag_do_swag_], use: [i, ret, _swag_do_swag_], def: [ret], in: [i, ret, _swag_int_swag_, _swag_do_swag_], out: [i, ret, _swag_int_swag_, _swag_do_swag_]
11: inP: [i, ret, _swag_int_swag_, _swag_do_swag_], outP: [_swag_int_swag_], use: [i, ret, _swag_do_swag_], def: [ret], in: [i, ret, _swag_int_swag_, _swag_do_swag_], out: [i, ret, _swag_int_swag_]
12: inP: [i, ret, _swag_int_swag_], outP: [i, dy, ret], use: [_swag_int_swag_], def: [dy], in: [i, ret, _swag_int_swag_], out: [i, dy, ret]
13: inP: [i, dy, ret], outP: [i, dy, ret], use: [i, dy, ret], def: [ret], in: [i, dy, ret, input, _swag_int_swag_], out: [i, dy, ret, input, _swag_int_swag_]
14: inP: [i, dy, ret, input, _swag_int_swag_], outP: [input, _swag_int_swag_], use: [i, dy, ret], def: [ret], in: [i, dy, ret, input, _swag_int_swag_], out: [ret, input, _swag_int_swag_]
15: inP: [ret, input, _swag_int_swag_], outP: [ret, input], use: [_swag_int_swag_], def: [_swag_int_swag_], in: [ret, input, _swag_int_swag_], out: [ret, input]
16: inP: [ret], outP: [], use: [ret], def: [], in: [ret], out: []
0: inP: [input], outP: [input], use: [], def: [ret], in: [input], out: [ret, input]
1: inP: [ret, input], outP: [ret, input], use: [], def: [_swag_int_swag_], in: [ret, input], out: [ret, input]
2: inP: [ret, input], outP: [i, ret], use: [input], def: [i], in: [ret, input], out: [i, ret]
3: inP: [i, ret], outP: [e, i, ret], use: [], def: [e], in: [i, ret], out: [e, i, ret]
4: inP: [e, i, ret], outP: [e, i, ret], use: [e, i, ret], def: [ret], in: [e, i, ret], out: [e, i, ret]
5: inP: [e, i, ret], outP: [i, ret], use: [e, i, ret], def: [ret], in: [e, i, ret], out: [i, ret]
6: inP: [i, ret], outP: [c, i, ret], use: [], def: [c], in: [i, ret], out: [c, i, ret]
7: inP: [c, i, ret], outP: [c, i, ret], use: [c, i, ret], def: [ret], in: [c, i, ret], out: [c, i, ret]
8: inP: [c, i, ret], outP: [i, ret], use: [c, i, ret], def: [ret], in: [c, i, ret], out: [i, ret]
9: inP: [i, ret], outP: [i, ret, _swag_do_swag_], use: [], def: [_swag_do_swag_], in: [i, ret, _swag_int_swag_], out: [i, ret, _swag_int_swag_, _swag_do_swag_]
10: inP: [i, ret, _swag_int_swag_, _swag_do_swag_], outP: [i, ret, _swag_int_swag_, _swag_do_swag_], use: [i, ret, _swag_do_swag_], def: [ret], in: [i, ret, _swag_int_swag_, _swag_do_swag_], out: [i, ret, _swag_int_swag_, _swag_do_swag_]
11: inP: [i, ret, _swag_int_swag_, _swag_do_swag_], outP: [i, ret, _swag_int_swag_], use: [i, ret, _swag_do_swag_], def: [ret], in: [i, ret, _swag_int_swag_, _swag_do_swag_], out: [i, ret, _swag_int_swag_]
12: inP: [i, ret, _swag_int_swag_], outP: [i, dy, ret], use: [_swag_int_swag_], def: [dy], in: [i, ret, input, _swag_int_swag_], out: [i, dy, ret, input, _swag_int_swag_]
13: inP: [i, dy, ret, input, _swag_int_swag_], outP: [i, dy, ret, input, _swag_int_swag_], use: [i, dy, ret], def: [ret], in: [i, dy, ret, input, _swag_int_swag_], out: [i, dy, ret, input, _swag_int_swag_]
14: inP: [i, dy, ret, input, _swag_int_swag_], outP: [ret, input, _swag_int_swag_], use: [i, dy, ret], def: [ret], in: [i, dy, ret, input, _swag_int_swag_], out: [ret, input, _swag_int_swag_]
15: inP: [ret, input, _swag_int_swag_], outP: [ret, input], use: [_swag_int_swag_], def: [_swag_int_swag_], in: [ret, input, _swag_int_swag_], out: [ret, input]
16: inP: [ret], outP: [], use: [ret], def: [], in: [ret], out: []
0: inP: [input], outP: [ret, input], use: [], def: [ret], in: [input], out: [ret, input]
1: inP: [ret, input], outP: [ret, input], use: [], def: [_swag_int_swag_], in: [ret, input], out: [ret, input]
2: inP: [ret, input], outP: [i, ret], use: [input], def: [i], in: [ret, input], out: [i, ret]
3: inP: [i, ret], outP: [e, i, ret], use: [], def: [e], in: [i, ret], out: [e, i, ret]
4: inP: [e, i, ret], outP: [e, i, ret], use: [e, i, ret], def: [ret], in: [e, i, ret], out: [e, i, ret]
5: inP: [e, i, ret], outP: [i, ret], use: [e, i, ret], def: [ret], in: [e, i, ret], out: [i, ret]
6: inP: [i, ret], outP: [c, i, ret], use: [], def: [c], in: [i, ret], out: [c, i, ret]
7: inP: [c, i, ret], outP: [c, i, ret], use: [c, i, ret], def: [ret], in: [c, i, ret], out: [c, i, ret]
8: inP: [c, i, ret], outP: [i, ret], use: [c, i, ret], def: [ret], in: [c, i, ret, _swag_int_swag_], out: [i, ret, _swag_int_swag_]
9: inP: [i, ret, _swag_int_swag_], outP: [i, ret, _swag_int_swag_, _swag_do_swag_], use: [], def: [_swag_do_swag_], in: [i, ret, _swag_int_swag_], out: [i, ret, _swag_int_swag_, _swag_do_swag_]
10: inP: [i, ret, _swag_int_swag_, _swag_do_swag_], outP: [i, ret, _swag_int_swag_, _swag_do_swag_], use: [i, ret, _swag_do_swag_], def: [ret], in: [i, ret, _swag_int_swag_, _swag_do_swag_], out: [i, ret, _swag_int_swag_, _swag_do_swag_]
11: inP: [i, ret, _swag_int_swag_, _swag_do_swag_], outP: [i, ret, _swag_int_swag_], use: [i, ret, _swag_do_swag_], def: [ret], in: [i, ret, input, _swag_int_swag_, _swag_do_swag_], out: [i, ret, input, _swag_int_swag_]
12: inP: [i, ret, input, _swag_int_swag_], outP: [i, dy, ret, input, _swag_int_swag_], use: [_swag_int_swag_], def: [dy], in: [i, ret, input, _swag_int_swag_], out: [i, dy, ret, input, _swag_int_swag_]
13: inP: [i, dy, ret, input, _swag_int_swag_], outP: [i, dy, ret, input, _swag_int_swag_], use: [i, dy, ret], def: [ret], in: [i, dy, ret, input, _swag_int_swag_], out: [i, dy, ret, input, _swag_int_swag_]
14: inP: [i, dy, ret, input, _swag_int_swag_], outP: [ret, input, _swag_int_swag_], use: [i, dy, ret], def: [ret], in: [i, dy, ret, input, _swag_int_swag_], out: [ret, input, _swag_int_swag_]
15: inP: [ret, input, _swag_int_swag_], outP: [ret, input], use: [_swag_int_swag_], def: [_swag_int_swag_], in: [ret, input, _swag_int_swag_], out: [ret, input]
16: inP: [ret], outP: [], use: [ret], def: [], in: [ret], out: []
0: inP: [input], outP: [ret, input], use: [], def: [ret], in: [input], out: [ret, input]
1: inP: [ret, input], outP: [ret, input], use: [], def: [_swag_int_swag_], in: [ret, input], out: [ret, input]
2: inP: [ret, input], outP: [i, ret], use: [input], def: [i], in: [ret, input], out: [i, ret]
3: inP: [i, ret], outP: [e, i, ret], use: [], def: [e], in: [i, ret], out: [e, i, ret]
4: inP: [e, i, ret], outP: [e, i, ret], use: [e, i, ret], def: [ret], in: [e, i, ret], out: [e, i, ret]
5: inP: [e, i, ret], outP: [i, ret], use: [e, i, ret], def: [ret], in: [e, i, ret], out: [i, ret]
6: inP: [i, ret], outP: [c, i, ret], use: [], def: [c], in: [i, ret], out: [c, i, ret]
7: inP: [c, i, ret], outP: [c, i, ret], use: [c, i, ret], def: [ret], in: [c, i, ret, _swag_int_swag_], out: [c, i, ret, _swag_int_swag_]
8: inP: [c, i, ret, _swag_int_swag_], outP: [i, ret, _swag_int_swag_], use: [c, i, ret], def: [ret], in: [c, i, ret, _swag_int_swag_], out: [i, ret, _swag_int_swag_]
9: inP: [i, ret, _swag_int_swag_], outP: [i, ret, _swag_int_swag_, _swag_do_swag_], use: [], def: [_swag_do_swag_], in: [i, ret, _swag_int_swag_], out: [i, ret, _swag_int_swag_, _swag_do_swag_]
10: inP: [i, ret, _swag_int_swag_, _swag_do_swag_], outP: [i, ret, _swag_int_swag_, _swag_do_swag_], use: [i, ret, _swag_do_swag_], def: [ret], in: [i, ret, input, _swag_int_swag_, _swag_do_swag_], out: [i, ret, input, _swag_int_swag_, _swag_do_swag_]
11: inP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], outP: [i, ret, input, _swag_int_swag_], use: [i, ret, _swag_do_swag_], def: [ret], in: [i, ret, input, _swag_int_swag_, _swag_do_swag_], out: [i, ret, input, _swag_int_swag_]
12: inP: [i, ret, input, _swag_int_swag_], outP: [i, dy, ret, input, _swag_int_swag_], use: [_swag_int_swag_], def: [dy], in: [i, ret, input, _swag_int_swag_], out: [i, dy, ret, input, _swag_int_swag_]
13: inP: [i, dy, ret, input, _swag_int_swag_], outP: [i, dy, ret, input, _swag_int_swag_], use: [i, dy, ret], def: [ret], in: [i, dy, ret, input, _swag_int_swag_], out: [i, dy, ret, input, _swag_int_swag_]
14: inP: [i, dy, ret, input, _swag_int_swag_], outP: [ret, input, _swag_int_swag_], use: [i, dy, ret], def: [ret], in: [i, dy, ret, input, _swag_int_swag_], out: [ret, input, _swag_int_swag_]
15: inP: [ret, input, _swag_int_swag_], outP: [ret, input], use: [_swag_int_swag_], def: [_swag_int_swag_], in: [ret, input, _swag_int_swag_], out: [ret, input]
16: inP: [ret], outP: [], use: [ret], def: [], in: [ret], out: []
0: inP: [input], outP: [ret, input], use: [], def: [ret], in: [input], out: [ret, input]
1: inP: [ret, input], outP: [ret, input], use: [], def: [_swag_int_swag_], in: [ret, input], out: [ret, input]
2: inP: [ret, input], outP: [i, ret], use: [input], def: [i], in: [ret, input], out: [i, ret]
3: inP: [i, ret], outP: [e, i, ret], use: [], def: [e], in: [i, ret], out: [e, i, ret]
4: inP: [e, i, ret], outP: [e, i, ret], use: [e, i, ret], def: [ret], in: [e, i, ret], out: [e, i, ret]
5: inP: [e, i, ret], outP: [i, ret], use: [e, i, ret], def: [ret], in: [e, i, ret], out: [i, ret]
6: inP: [i, ret], outP: [c, i, ret], use: [], def: [c], in: [i, ret, _swag_int_swag_], out: [c, i, ret, _swag_int_swag_]
7: inP: [c, i, ret, _swag_int_swag_], outP: [c, i, ret, _swag_int_swag_], use: [c, i, ret], def: [ret], in: [c, i, ret, _swag_int_swag_], out: [c, i, ret, _swag_int_swag_]
8: inP: [c, i, ret, _swag_int_swag_], outP: [i, ret, _swag_int_swag_], use: [c, i, ret], def: [ret], in: [c, i, ret, _swag_int_swag_], out: [i, ret, _swag_int_swag_]
9: inP: [i, ret, _swag_int_swag_], outP: [i, ret, _swag_int_swag_, _swag_do_swag_], use: [], def: [_swag_do_swag_], in: [i, ret, input, _swag_int_swag_], out: [i, ret, input, _swag_int_swag_, _swag_do_swag_]
10: inP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], outP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], use: [i, ret, _swag_do_swag_], def: [ret], in: [i, ret, input, _swag_int_swag_, _swag_do_swag_], out: [i, ret, input, _swag_int_swag_, _swag_do_swag_]
11: inP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], outP: [i, ret, input, _swag_int_swag_], use: [i, ret, _swag_do_swag_], def: [ret], in: [i, ret, input, _swag_int_swag_, _swag_do_swag_], out: [i, ret, input, _swag_int_swag_]
12: inP: [i, ret, input, _swag_int_swag_], outP: [i, dy, ret, input, _swag_int_swag_], use: [_swag_int_swag_], def: [dy], in: [i, ret, input, _swag_int_swag_], out: [i, dy, ret, input, _swag_int_swag_]
13: inP: [i, dy, ret, input, _swag_int_swag_], outP: [i, dy, ret, input, _swag_int_swag_], use: [i, dy, ret], def: [ret], in: [i, dy, ret, input, _swag_int_swag_], out: [i, dy, ret, input, _swag_int_swag_]
14: inP: [i, dy, ret, input, _swag_int_swag_], outP: [ret, input, _swag_int_swag_], use: [i, dy, ret], def: [ret], in: [i, dy, ret, input, _swag_int_swag_], out: [ret, input, _swag_int_swag_]
15: inP: [ret, input, _swag_int_swag_], outP: [ret, input], use: [_swag_int_swag_], def: [_swag_int_swag_], in: [ret, input, _swag_int_swag_], out: [ret, input]
16: inP: [ret], outP: [], use: [ret], def: [], in: [ret], out: []
0: inP: [input], outP: [ret, input], use: [], def: [ret], in: [input], out: [ret, input]
1: inP: [ret, input], outP: [ret, input], use: [], def: [_swag_int_swag_], in: [ret, input], out: [ret, input]
2: inP: [ret, input], outP: [i, ret], use: [input], def: [i], in: [ret, input], out: [i, ret]
3: inP: [i, ret], outP: [e, i, ret], use: [], def: [e], in: [i, ret], out: [e, i, ret]
4: inP: [e, i, ret], outP: [e, i, ret], use: [e, i, ret], def: [ret], in: [e, i, ret], out: [e, i, ret]
5: inP: [e, i, ret], outP: [i, ret], use: [e, i, ret], def: [ret], in: [e, i, ret, _swag_int_swag_], out: [i, ret, _swag_int_swag_]
6: inP: [i, ret, _swag_int_swag_], outP: [c, i, ret, _swag_int_swag_], use: [], def: [c], in: [i, ret, _swag_int_swag_], out: [c, i, ret, _swag_int_swag_]
7: inP: [c, i, ret, _swag_int_swag_], outP: [c, i, ret, _swag_int_swag_], use: [c, i, ret], def: [ret], in: [c, i, ret, _swag_int_swag_], out: [c, i, ret, _swag_int_swag_]
8: inP: [c, i, ret, _swag_int_swag_], outP: [i, ret, _swag_int_swag_], use: [c, i, ret], def: [ret], in: [c, i, ret, input, _swag_int_swag_], out: [i, ret, input, _swag_int_swag_]
9: inP: [i, ret, input, _swag_int_swag_], outP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], use: [], def: [_swag_do_swag_], in: [i, ret, input, _swag_int_swag_], out: [i, ret, input, _swag_int_swag_, _swag_do_swag_]
10: inP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], outP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], use: [i, ret, _swag_do_swag_], def: [ret], in: [i, ret, input, _swag_int_swag_, _swag_do_swag_], out: [i, ret, input, _swag_int_swag_, _swag_do_swag_]
11: inP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], outP: [i, ret, input, _swag_int_swag_], use: [i, ret, _swag_do_swag_], def: [ret], in: [i, ret, input, _swag_int_swag_, _swag_do_swag_], out: [i, ret, input, _swag_int_swag_]
12: inP: [i, ret, input, _swag_int_swag_], outP: [i, dy, ret, input, _swag_int_swag_], use: [_swag_int_swag_], def: [dy], in: [i, ret, input, _swag_int_swag_], out: [i, dy, ret, input, _swag_int_swag_]
13: inP: [i, dy, ret, input, _swag_int_swag_], outP: [i, dy, ret, input, _swag_int_swag_], use: [i, dy, ret], def: [ret], in: [i, dy, ret, input, _swag_int_swag_], out: [i, dy, ret, input, _swag_int_swag_]
14: inP: [i, dy, ret, input, _swag_int_swag_], outP: [ret, input, _swag_int_swag_], use: [i, dy, ret], def: [ret], in: [i, dy, ret, input, _swag_int_swag_], out: [ret, input, _swag_int_swag_]
15: inP: [ret, input, _swag_int_swag_], outP: [ret, input], use: [_swag_int_swag_], def: [_swag_int_swag_], in: [ret, input, _swag_int_swag_], out: [ret, input]
16: inP: [ret], outP: [], use: [ret], def: [], in: [ret], out: []
0: inP: [input], outP: [ret, input], use: [], def: [ret], in: [input], out: [ret, input]
1: inP: [ret, input], outP: [ret, input], use: [], def: [_swag_int_swag_], in: [ret, input], out: [ret, input]
2: inP: [ret, input], outP: [i, ret], use: [input], def: [i], in: [ret, input], out: [i, ret]
3: inP: [i, ret], outP: [e, i, ret], use: [], def: [e], in: [i, ret], out: [e, i, ret]
4: inP: [e, i, ret], outP: [e, i, ret], use: [e, i, ret], def: [ret], in: [e, i, ret, _swag_int_swag_], out: [e, i, ret, _swag_int_swag_]
5: inP: [e, i, ret, _swag_int_swag_], outP: [i, ret, _swag_int_swag_], use: [e, i, ret], def: [ret], in: [e, i, ret, _swag_int_swag_], out: [i, ret, _swag_int_swag_]
6: inP: [i, ret, _swag_int_swag_], outP: [c, i, ret, _swag_int_swag_], use: [], def: [c], in: [i, ret, _swag_int_swag_], out: [c, i, ret, _swag_int_swag_]
7: inP: [c, i, ret, _swag_int_swag_], outP: [c, i, ret, _swag_int_swag_], use: [c, i, ret], def: [ret], in: [c, i, ret, input, _swag_int_swag_], out: [c, i, ret, input, _swag_int_swag_]
8: inP: [c, i, ret, input, _swag_int_swag_], outP: [i, ret, input, _swag_int_swag_], use: [c, i, ret], def: [ret], in: [c, i, ret, input, _swag_int_swag_], out: [i, ret, input, _swag_int_swag_]
9: inP: [i, ret, input, _swag_int_swag_], outP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], use: [], def: [_swag_do_swag_], in: [i, ret, input, _swag_int_swag_], out: [i, ret, input, _swag_int_swag_, _swag_do_swag_]
10: inP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], outP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], use: [i, ret, _swag_do_swag_], def: [ret], in: [i, ret, input, _swag_int_swag_, _swag_do_swag_], out: [i, ret, input, _swag_int_swag_, _swag_do_swag_]
11: inP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], outP: [i, ret, input, _swag_int_swag_], use: [i, ret, _swag_do_swag_], def: [ret], in: [i, ret, input, _swag_int_swag_, _swag_do_swag_], out: [i, ret, input, _swag_int_swag_]
12: inP: [i, ret, input, _swag_int_swag_], outP: [i, dy, ret, input, _swag_int_swag_], use: [_swag_int_swag_], def: [dy], in: [i, ret, input, _swag_int_swag_], out: [i, dy, ret, input, _swag_int_swag_]
13: inP: [i, dy, ret, input, _swag_int_swag_], outP: [i, dy, ret, input, _swag_int_swag_], use: [i, dy, ret], def: [ret], in: [i, dy, ret, input, _swag_int_swag_], out: [i, dy, ret, input, _swag_int_swag_]
14: inP: [i, dy, ret, input, _swag_int_swag_], outP: [ret, input, _swag_int_swag_], use: [i, dy, ret], def: [ret], in: [i, dy, ret, input, _swag_int_swag_], out: [ret, input, _swag_int_swag_]
15: inP: [ret, input, _swag_int_swag_], outP: [ret, input], use: [_swag_int_swag_], def: [_swag_int_swag_], in: [ret, input, _swag_int_swag_], out: [ret, input]
16: inP: [ret], outP: [], use: [ret], def: [], in: [ret], out: []
0: inP: [input], outP: [ret, input], use: [], def: [ret], in: [input], out: [ret, input]
1: inP: [ret, input], outP: [ret, input], use: [], def: [_swag_int_swag_], in: [ret, input], out: [ret, input]
2: inP: [ret, input], outP: [i, ret], use: [input], def: [i], in: [ret, input], out: [i, ret]
3: inP: [i, ret], outP: [e, i, ret], use: [], def: [e], in: [i, ret, _swag_int_swag_], out: [e, i, ret, _swag_int_swag_]
4: inP: [e, i, ret, _swag_int_swag_], outP: [e, i, ret, _swag_int_swag_], use: [e, i, ret], def: [ret], in: [e, i, ret, _swag_int_swag_], out: [e, i, ret, _swag_int_swag_]
5: inP: [e, i, ret, _swag_int_swag_], outP: [i, ret, _swag_int_swag_], use: [e, i, ret], def: [ret], in: [e, i, ret, _swag_int_swag_], out: [i, ret, _swag_int_swag_]
6: inP: [i, ret, _swag_int_swag_], outP: [c, i, ret, _swag_int_swag_], use: [], def: [c], in: [i, ret, input, _swag_int_swag_], out: [c, i, ret, input, _swag_int_swag_]
7: inP: [c, i, ret, input, _swag_int_swag_], outP: [c, i, ret, input, _swag_int_swag_], use: [c, i, ret], def: [ret], in: [c, i, ret, input, _swag_int_swag_], out: [c, i, ret, input, _swag_int_swag_]
8: inP: [c, i, ret, input, _swag_int_swag_], outP: [i, ret, input, _swag_int_swag_], use: [c, i, ret], def: [ret], in: [c, i, ret, input, _swag_int_swag_], out: [i, ret, input, _swag_int_swag_]
9: inP: [i, ret, input, _swag_int_swag_], outP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], use: [], def: [_swag_do_swag_], in: [i, ret, input, _swag_int_swag_], out: [i, ret, input, _swag_int_swag_, _swag_do_swag_]
10: inP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], outP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], use: [i, ret, _swag_do_swag_], def: [ret], in: [i, ret, input, _swag_int_swag_, _swag_do_swag_], out: [i, ret, input, _swag_int_swag_, _swag_do_swag_]
11: inP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], outP: [i, ret, input, _swag_int_swag_], use: [i, ret, _swag_do_swag_], def: [ret], in: [i, ret, input, _swag_int_swag_, _swag_do_swag_], out: [i, ret, input, _swag_int_swag_]
12: inP: [i, ret, input, _swag_int_swag_], outP: [i, dy, ret, input, _swag_int_swag_], use: [_swag_int_swag_], def: [dy], in: [i, ret, input, _swag_int_swag_], out: [i, dy, ret, input, _swag_int_swag_]
13: inP: [i, dy, ret, input, _swag_int_swag_], outP: [i, dy, ret, input, _swag_int_swag_], use: [i, dy, ret], def: [ret], in: [i, dy, ret, input, _swag_int_swag_], out: [i, dy, ret, input, _swag_int_swag_]
14: inP: [i, dy, ret, input, _swag_int_swag_], outP: [ret, input, _swag_int_swag_], use: [i, dy, ret], def: [ret], in: [i, dy, ret, input, _swag_int_swag_], out: [ret, input, _swag_int_swag_]
15: inP: [ret, input, _swag_int_swag_], outP: [ret, input], use: [_swag_int_swag_], def: [_swag_int_swag_], in: [ret, input, _swag_int_swag_], out: [ret, input]
16: inP: [ret], outP: [], use: [ret], def: [], in: [ret], out: []
0: inP: [input], outP: [ret, input], use: [], def: [ret], in: [input], out: [ret, input]
1: inP: [ret, input], outP: [ret, input], use: [], def: [_swag_int_swag_], in: [ret, input], out: [ret, input]
2: inP: [ret, input], outP: [i, ret], use: [input], def: [i], in: [ret, input, _swag_int_swag_], out: [i, ret, _swag_int_swag_]
3: inP: [i, ret, _swag_int_swag_], outP: [e, i, ret, _swag_int_swag_], use: [], def: [e], in: [i, ret, _swag_int_swag_], out: [e, i, ret, _swag_int_swag_]
4: inP: [e, i, ret, _swag_int_swag_], outP: [e, i, ret, _swag_int_swag_], use: [e, i, ret], def: [ret], in: [e, i, ret, _swag_int_swag_], out: [e, i, ret, _swag_int_swag_]
5: inP: [e, i, ret, _swag_int_swag_], outP: [i, ret, _swag_int_swag_], use: [e, i, ret], def: [ret], in: [e, i, ret, input, _swag_int_swag_], out: [i, ret, input, _swag_int_swag_]
6: inP: [i, ret, input, _swag_int_swag_], outP: [c, i, ret, input, _swag_int_swag_], use: [], def: [c], in: [i, ret, input, _swag_int_swag_], out: [c, i, ret, input, _swag_int_swag_]
7: inP: [c, i, ret, input, _swag_int_swag_], outP: [c, i, ret, input, _swag_int_swag_], use: [c, i, ret], def: [ret], in: [c, i, ret, input, _swag_int_swag_], out: [c, i, ret, input, _swag_int_swag_]
8: inP: [c, i, ret, input, _swag_int_swag_], outP: [i, ret, input, _swag_int_swag_], use: [c, i, ret], def: [ret], in: [c, i, ret, input, _swag_int_swag_], out: [i, ret, input, _swag_int_swag_]
9: inP: [i, ret, input, _swag_int_swag_], outP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], use: [], def: [_swag_do_swag_], in: [i, ret, input, _swag_int_swag_], out: [i, ret, input, _swag_int_swag_, _swag_do_swag_]
10: inP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], outP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], use: [i, ret, _swag_do_swag_], def: [ret], in: [i, ret, input, _swag_int_swag_, _swag_do_swag_], out: [i, ret, input, _swag_int_swag_, _swag_do_swag_]
11: inP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], outP: [i, ret, input, _swag_int_swag_], use: [i, ret, _swag_do_swag_], def: [ret], in: [i, ret, input, _swag_int_swag_, _swag_do_swag_], out: [i, ret, input, _swag_int_swag_]
12: inP: [i, ret, input, _swag_int_swag_], outP: [i, dy, ret, input, _swag_int_swag_], use: [_swag_int_swag_], def: [dy], in: [i, ret, input, _swag_int_swag_], out: [i, dy, ret, input, _swag_int_swag_]
13: inP: [i, dy, ret, input, _swag_int_swag_], outP: [i, dy, ret, input, _swag_int_swag_], use: [i, dy, ret], def: [ret], in: [i, dy, ret, input, _swag_int_swag_], out: [i, dy, ret, input, _swag_int_swag_]
14: inP: [i, dy, ret, input, _swag_int_swag_], outP: [ret, input, _swag_int_swag_], use: [i, dy, ret], def: [ret], in: [i, dy, ret, input, _swag_int_swag_], out: [ret, input, _swag_int_swag_]
15: inP: [ret, input, _swag_int_swag_], outP: [ret, input], use: [_swag_int_swag_], def: [_swag_int_swag_], in: [ret, input, _swag_int_swag_], out: [ret, input, _swag_int_swag_]
16: inP: [ret], outP: [], use: [ret], def: [], in: [ret], out: []
0: inP: [input], outP: [ret, input], use: [], def: [ret], in: [input], out: [ret, input]
1: inP: [ret, input], outP: [ret, input], use: [], def: [_swag_int_swag_], in: [ret, input], out: [ret, input, _swag_int_swag_]
2: inP: [ret, input, _swag_int_swag_], outP: [i, ret, _swag_int_swag_], use: [input], def: [i], in: [ret, input, _swag_int_swag_], out: [i, ret, _swag_int_swag_]
3: inP: [i, ret, _swag_int_swag_], outP: [e, i, ret, _swag_int_swag_], use: [], def: [e], in: [i, ret, _swag_int_swag_], out: [e, i, ret, _swag_int_swag_]
4: inP: [e, i, ret, _swag_int_swag_], outP: [e, i, ret, _swag_int_swag_], use: [e, i, ret], def: [ret], in: [e, i, ret, input, _swag_int_swag_], out: [e, i, ret, input, _swag_int_swag_]
5: inP: [e, i, ret, input, _swag_int_swag_], outP: [i, ret, input, _swag_int_swag_], use: [e, i, ret], def: [ret], in: [e, i, ret, input, _swag_int_swag_], out: [i, ret, input, _swag_int_swag_]
6: inP: [i, ret, input, _swag_int_swag_], outP: [c, i, ret, input, _swag_int_swag_], use: [], def: [c], in: [i, ret, input, _swag_int_swag_], out: [c, i, ret, input, _swag_int_swag_]
7: inP: [c, i, ret, input, _swag_int_swag_], outP: [c, i, ret, input, _swag_int_swag_], use: [c, i, ret], def: [ret], in: [c, i, ret, input, _swag_int_swag_], out: [c, i, ret, input, _swag_int_swag_]
8: inP: [c, i, ret, input, _swag_int_swag_], outP: [i, ret, input, _swag_int_swag_], use: [c, i, ret], def: [ret], in: [c, i, ret, input, _swag_int_swag_], out: [i, ret, input, _swag_int_swag_]
9: inP: [i, ret, input, _swag_int_swag_], outP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], use: [], def: [_swag_do_swag_], in: [i, ret, input, _swag_int_swag_], out: [i, ret, input, _swag_int_swag_, _swag_do_swag_]
10: inP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], outP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], use: [i, ret, _swag_do_swag_], def: [ret], in: [i, ret, input, _swag_int_swag_, _swag_do_swag_], out: [i, ret, input, _swag_int_swag_, _swag_do_swag_]
11: inP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], outP: [i, ret, input, _swag_int_swag_], use: [i, ret, _swag_do_swag_], def: [ret], in: [i, ret, input, _swag_int_swag_, _swag_do_swag_], out: [i, ret, input, _swag_int_swag_]
12: inP: [i, ret, input, _swag_int_swag_], outP: [i, dy, ret, input, _swag_int_swag_], use: [_swag_int_swag_], def: [dy], in: [i, ret, input, _swag_int_swag_], out: [i, dy, ret, input, _swag_int_swag_]
13: inP: [i, dy, ret, input, _swag_int_swag_], outP: [i, dy, ret, input, _swag_int_swag_], use: [i, dy, ret], def: [ret], in: [i, dy, ret, input, _swag_int_swag_], out: [i, dy, ret, input, _swag_int_swag_]
14: inP: [i, dy, ret, input, _swag_int_swag_], outP: [ret, input, _swag_int_swag_], use: [i, dy, ret], def: [ret], in: [i, dy, ret, input, _swag_int_swag_], out: [ret, input, _swag_int_swag_]
15: inP: [ret, input, _swag_int_swag_], outP: [ret, input, _swag_int_swag_], use: [_swag_int_swag_], def: [_swag_int_swag_], in: [ret, input, _swag_int_swag_], out: [ret, input, _swag_int_swag_]
16: inP: [ret], outP: [], use: [ret], def: [], in: [ret], out: []
0: inP: [input], outP: [ret, input], use: [], def: [ret], in: [input], out: [ret, input]
1: inP: [ret, input], outP: [ret, input, _swag_int_swag_], use: [], def: [_swag_int_swag_], in: [ret, input], out: [ret, input, _swag_int_swag_]
2: inP: [ret, input, _swag_int_swag_], outP: [i, ret, _swag_int_swag_], use: [input], def: [i], in: [ret, input, _swag_int_swag_], out: [i, ret, _swag_int_swag_]
3: inP: [i, ret, _swag_int_swag_], outP: [e, i, ret, _swag_int_swag_], use: [], def: [e], in: [i, ret, input, _swag_int_swag_], out: [e, i, ret, input, _swag_int_swag_]
4: inP: [e, i, ret, input, _swag_int_swag_], outP: [e, i, ret, input, _swag_int_swag_], use: [e, i, ret], def: [ret], in: [e, i, ret, input, _swag_int_swag_], out: [e, i, ret, input, _swag_int_swag_]
5: inP: [e, i, ret, input, _swag_int_swag_], outP: [i, ret, input, _swag_int_swag_], use: [e, i, ret], def: [ret], in: [e, i, ret, input, _swag_int_swag_], out: [i, ret, input, _swag_int_swag_]
6: inP: [i, ret, input, _swag_int_swag_], outP: [c, i, ret, input, _swag_int_swag_], use: [], def: [c], in: [i, ret, input, _swag_int_swag_], out: [c, i, ret, input, _swag_int_swag_]
7: inP: [c, i, ret, input, _swag_int_swag_], outP: [c, i, ret, input, _swag_int_swag_], use: [c, i, ret], def: [ret], in: [c, i, ret, input, _swag_int_swag_], out: [c, i, ret, input, _swag_int_swag_]
8: inP: [c, i, ret, input, _swag_int_swag_], outP: [i, ret, input, _swag_int_swag_], use: [c, i, ret], def: [ret], in: [c, i, ret, input, _swag_int_swag_], out: [i, ret, input, _swag_int_swag_]
9: inP: [i, ret, input, _swag_int_swag_], outP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], use: [], def: [_swag_do_swag_], in: [i, ret, input, _swag_int_swag_], out: [i, ret, input, _swag_int_swag_, _swag_do_swag_]
10: inP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], outP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], use: [i, ret, _swag_do_swag_], def: [ret], in: [i, ret, input, _swag_int_swag_, _swag_do_swag_], out: [i, ret, input, _swag_int_swag_, _swag_do_swag_]
11: inP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], outP: [i, ret, input, _swag_int_swag_], use: [i, ret, _swag_do_swag_], def: [ret], in: [i, ret, input, _swag_int_swag_, _swag_do_swag_], out: [i, ret, input, _swag_int_swag_]
12: inP: [i, ret, input, _swag_int_swag_], outP: [i, dy, ret, input, _swag_int_swag_], use: [_swag_int_swag_], def: [dy], in: [i, ret, input, _swag_int_swag_], out: [i, dy, ret, input, _swag_int_swag_]
13: inP: [i, dy, ret, input, _swag_int_swag_], outP: [i, dy, ret, input, _swag_int_swag_], use: [i, dy, ret], def: [ret], in: [i, dy, ret, input, _swag_int_swag_], out: [i, dy, ret, input, _swag_int_swag_]
14: inP: [i, dy, ret, input, _swag_int_swag_], outP: [ret, input, _swag_int_swag_], use: [i, dy, ret], def: [ret], in: [i, dy, ret, input, _swag_int_swag_], out: [ret, input, _swag_int_swag_]
15: inP: [ret, input, _swag_int_swag_], outP: [ret, input, _swag_int_swag_], use: [_swag_int_swag_], def: [_swag_int_swag_], in: [ret, input, _swag_int_swag_], out: [ret, input, _swag_int_swag_]
16: inP: [ret], outP: [], use: [ret], def: [], in: [ret], out: []
0: inP: [input], outP: [ret, input], use: [], def: [ret], in: [input], out: [ret, input]
1: inP: [ret, input], outP: [ret, input, _swag_int_swag_], use: [], def: [_swag_int_swag_], in: [ret, input], out: [ret, input, _swag_int_swag_]
2: inP: [ret, input, _swag_int_swag_], outP: [i, ret, _swag_int_swag_], use: [input], def: [i], in: [ret, input, _swag_int_swag_], out: [i, ret, input, _swag_int_swag_]
3: inP: [i, ret, input, _swag_int_swag_], outP: [e, i, ret, input, _swag_int_swag_], use: [], def: [e], in: [i, ret, input, _swag_int_swag_], out: [e, i, ret, input, _swag_int_swag_]
4: inP: [e, i, ret, input, _swag_int_swag_], outP: [e, i, ret, input, _swag_int_swag_], use: [e, i, ret], def: [ret], in: [e, i, ret, input, _swag_int_swag_], out: [e, i, ret, input, _swag_int_swag_]
5: inP: [e, i, ret, input, _swag_int_swag_], outP: [i, ret, input, _swag_int_swag_], use: [e, i, ret], def: [ret], in: [e, i, ret, input, _swag_int_swag_], out: [i, ret, input, _swag_int_swag_]
6: inP: [i, ret, input, _swag_int_swag_], outP: [c, i, ret, input, _swag_int_swag_], use: [], def: [c], in: [i, ret, input, _swag_int_swag_], out: [c, i, ret, input, _swag_int_swag_]
7: inP: [c, i, ret, input, _swag_int_swag_], outP: [c, i, ret, input, _swag_int_swag_], use: [c, i, ret], def: [ret], in: [c, i, ret, input, _swag_int_swag_], out: [c, i, ret, input, _swag_int_swag_]
8: inP: [c, i, ret, input, _swag_int_swag_], outP: [i, ret, input, _swag_int_swag_], use: [c, i, ret], def: [ret], in: [c, i, ret, input, _swag_int_swag_], out: [i, ret, input, _swag_int_swag_]
9: inP: [i, ret, input, _swag_int_swag_], outP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], use: [], def: [_swag_do_swag_], in: [i, ret, input, _swag_int_swag_], out: [i, ret, input, _swag_int_swag_, _swag_do_swag_]
10: inP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], outP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], use: [i, ret, _swag_do_swag_], def: [ret], in: [i, ret, input, _swag_int_swag_, _swag_do_swag_], out: [i, ret, input, _swag_int_swag_, _swag_do_swag_]
11: inP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], outP: [i, ret, input, _swag_int_swag_], use: [i, ret, _swag_do_swag_], def: [ret], in: [i, ret, input, _swag_int_swag_, _swag_do_swag_], out: [i, ret, input, _swag_int_swag_]
12: inP: [i, ret, input, _swag_int_swag_], outP: [i, dy, ret, input, _swag_int_swag_], use: [_swag_int_swag_], def: [dy], in: [i, ret, input, _swag_int_swag_], out: [i, dy, ret, input, _swag_int_swag_]
13: inP: [i, dy, ret, input, _swag_int_swag_], outP: [i, dy, ret, input, _swag_int_swag_], use: [i, dy, ret], def: [ret], in: [i, dy, ret, input, _swag_int_swag_], out: [i, dy, ret, input, _swag_int_swag_]
14: inP: [i, dy, ret, input, _swag_int_swag_], outP: [ret, input, _swag_int_swag_], use: [i, dy, ret], def: [ret], in: [i, dy, ret, input, _swag_int_swag_], out: [ret, input, _swag_int_swag_]
15: inP: [ret, input, _swag_int_swag_], outP: [ret, input, _swag_int_swag_], use: [_swag_int_swag_], def: [_swag_int_swag_], in: [ret, input, _swag_int_swag_], out: [ret, input, _swag_int_swag_]
16: inP: [ret], outP: [], use: [ret], def: [], in: [ret], out: []
0: inP: [input], outP: [ret, input], use: [], def: [ret], in: [input], out: [ret, input]
1: inP: [ret, input], outP: [ret, input, _swag_int_swag_], use: [], def: [_swag_int_swag_], in: [ret, input], out: [ret, input, _swag_int_swag_]
2: inP: [ret, input, _swag_int_swag_], outP: [i, ret, input, _swag_int_swag_], use: [input], def: [i], in: [ret, input, _swag_int_swag_], out: [i, ret, input, _swag_int_swag_]
3: inP: [i, ret, input, _swag_int_swag_], outP: [e, i, ret, input, _swag_int_swag_], use: [], def: [e], in: [i, ret, input, _swag_int_swag_], out: [e, i, ret, input, _swag_int_swag_]
4: inP: [e, i, ret, input, _swag_int_swag_], outP: [e, i, ret, input, _swag_int_swag_], use: [e, i, ret], def: [ret], in: [e, i, ret, input, _swag_int_swag_], out: [e, i, ret, input, _swag_int_swag_]
5: inP: [e, i, ret, input, _swag_int_swag_], outP: [i, ret, input, _swag_int_swag_], use: [e, i, ret], def: [ret], in: [e, i, ret, input, _swag_int_swag_], out: [i, ret, input, _swag_int_swag_]
6: inP: [i, ret, input, _swag_int_swag_], outP: [c, i, ret, input, _swag_int_swag_], use: [], def: [c], in: [i, ret, input, _swag_int_swag_], out: [c, i, ret, input, _swag_int_swag_]
7: inP: [c, i, ret, input, _swag_int_swag_], outP: [c, i, ret, input, _swag_int_swag_], use: [c, i, ret], def: [ret], in: [c, i, ret, input, _swag_int_swag_], out: [c, i, ret, input, _swag_int_swag_]
8: inP: [c, i, ret, input, _swag_int_swag_], outP: [i, ret, input, _swag_int_swag_], use: [c, i, ret], def: [ret], in: [c, i, ret, input, _swag_int_swag_], out: [i, ret, input, _swag_int_swag_]
9: inP: [i, ret, input, _swag_int_swag_], outP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], use: [], def: [_swag_do_swag_], in: [i, ret, input, _swag_int_swag_], out: [i, ret, input, _swag_int_swag_, _swag_do_swag_]
10: inP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], outP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], use: [i, ret, _swag_do_swag_], def: [ret], in: [i, ret, input, _swag_int_swag_, _swag_do_swag_], out: [i, ret, input, _swag_int_swag_, _swag_do_swag_]
11: inP: [i, ret, input, _swag_int_swag_, _swag_do_swag_], outP: [i, ret, input, _swag_int_swag_], use: [i, ret, _swag_do_swag_], def: [ret], in: [i, ret, input, _swag_int_swag_, _swag_do_swag_], out: [i, ret, input, _swag_int_swag_]
12: inP: [i, ret, input, _swag_int_swag_], outP: [i, dy, ret, input, _swag_int_swag_], use: [_swag_int_swag_], def: [dy], in: [i, ret, input, _swag_int_swag_], out: [i, dy, ret, input, _swag_int_swag_]
13: inP: [i, dy, ret, input, _swag_int_swag_], outP: [i, dy, ret, input, _swag_int_swag_], use: [i, dy, ret], def: [ret], in: [i, dy, ret, input, _swag_int_swag_], out: [i, dy, ret, input, _swag_int_swag_]
14: inP: [i, dy, ret, input, _swag_int_swag_], outP: [ret, input, _swag_int_swag_], use: [i, dy, ret], def: [ret], in: [i, dy, ret, input, _swag_int_swag_], out: [ret, input, _swag_int_swag_]
15: inP: [ret, input, _swag_int_swag_], outP: [ret, input, _swag_int_swag_], use: [_swag_int_swag_], def: [_swag_int_swag_], in: [ret, input, _swag_int_swag_], out: [ret, input, _swag_int_swag_]
16: inP: [ret], outP: [], use: [ret], def: [], in: [ret], out: []

make output     :  
=================
make: Entering directory '/home/dominick/workspace/Compilers/cbuild'
gcc -c -o out.o out.c -g
gcc -o a.out cubex_external_functions.o master.o out.o -g
make: Leaving directory '/home/dominick/workspace/Compilers/cbuild'

expected output : NO COMPILE
actual output   : NO COMPILE
NO COMPILEC
NO COMPILEC2
NO COMPILE
NO COMPILE
NO COMPILEDo
NO COMPILEDo
NO COMPILEDo2
NO COMPILEDo2
_________________________________


_________________________________

TEST FAILED     : 12

compiler output :  
=================
Checker Error
CubexTC$TypeCheckException: CLASS RaceCar DOES NOT PRESENT METHOD crashed FOUND IN PARENT TYPE
	at CubexClass.typeCheck(CubexObject.java:254)
	at CubexClassProg.typeCheck(CubexProgs.java:209)
	at CubexClassProg.typeCheck(CubexProgs.java:210)
	at CubexClassProg.typeCheck(CubexProgs.java:210)
	at CubexInterfaceProg.typeCheck(CubexProgs.java:185)
	at CubexInterfaceProg.typeCheck(CubexProgs.java:185)
	at CubexInterfaceProg.typeCheck(CubexProgs.java:185)
	at CubexInterfaceProg.typeCheck(CubexProgs.java:185)
	at CubexInterfaceProg.typeCheck(CubexProgs.java:185)
	at CubexInterfaceProg.typeCheck(CubexProgs.java:185)
	at CubexInterfaceProg.typeCheck(CubexProgs.java:185)
	at CubexInterfaceProg.typeCheck(CubexProgs.java:185)
	at CubexInterfaceProg.typeCheck(CubexProgs.java:185)
	at CChecker.check(CChecker.java:15)
	at CubexGeneratorProg.main(CubexGeneratorProg.java:26)

make output     :  
=================
make: Entering directory '/home/dominick/workspace/Compilers/cbuild'
gcc -c -o out.o out.c -g
gcc -o a.out cubex_external_functions.o master.o out.o -g
make: Leaving directory '/home/dominick/workspace/Compilers/cbuild'

expected output : Crash
YAY, A RACE CAR!
Car

actual output   : reject
_________________________________


_________________________________

TEST FAILED     : 2

compiler output :  
=================
0: inP: [], outP: [], use: [], def: [retval], in: [], out: []
1: inP: [], outP: [], use: [unicode], def: [u], in: [unicode], out: []
2: inP: [], outP: [], use: [], def: [x], in: [], out: []
3: inP: [], outP: [], use: [x], def: [m], in: [x], out: []
4: inP: [], outP: [], use: [m], def: [], in: [m], out: []
5: inP: [], outP: [], use: [retval, u], def: [retval], in: [retval, u, x], out: [x]
6: inP: [], outP: [], use: [u], def: [u], in: [u], out: []
7: inP: [], outP: [], use: [retval], def: [], in: [retval], out: []
0: inP: [], outP: [], use: [], def: [retval], in: [unicode], out: [unicode]
1: inP: [unicode], outP: [], use: [unicode], def: [u], in: [unicode], out: []
2: inP: [], outP: [], use: [], def: [x], in: [retval], out: [retval, x]
3: inP: [x], outP: [], use: [x], def: [m], in: [u, x], out: [m, u]
4: inP: [m], outP: [], use: [m], def: [], in: [retval, m, u, x], out: [retval, u, x]
5: inP: [retval, u, x], outP: [x], use: [retval, u], def: [retval], in: [retval, u, x], out: [u, x]
6: inP: [u], outP: [], use: [u], def: [u], in: [retval, u], out: [retval]
7: inP: [retval], outP: [], use: [retval], def: [], in: [retval], out: []
0: inP: [unicode], outP: [unicode], use: [], def: [retval], in: [unicode], out: [unicode]
1: inP: [unicode], outP: [], use: [unicode], def: [u], in: [retval, unicode], out: [retval]
2: inP: [retval], outP: [retval, x], use: [], def: [x], in: [retval, u], out: [retval, u, x]
3: inP: [u, x], outP: [m, u], use: [x], def: [m], in: [retval, u, x], out: [retval, m, u, x]
4: inP: [retval, m, u, x], outP: [retval, u, x], use: [m], def: [], in: [retval, m, u, x], out: [retval, u, x]
5: inP: [retval, u, x], outP: [u, x], use: [retval, u], def: [retval], in: [retval, u, x], out: [retval, u, x]
6: inP: [retval, u], outP: [retval], use: [u], def: [u], in: [retval, u], out: [retval, u]
7: inP: [retval], outP: [], use: [retval], def: [], in: [retval], out: []
0: inP: [unicode], outP: [unicode], use: [], def: [retval], in: [unicode], out: [retval, unicode]
1: inP: [retval, unicode], outP: [retval], use: [unicode], def: [u], in: [retval, unicode], out: [retval, u]
2: inP: [retval, u], outP: [retval, u, x], use: [], def: [x], in: [retval, u], out: [retval, u, x]
3: inP: [retval, u, x], outP: [retval, m, u, x], use: [x], def: [m], in: [retval, u, x], out: [retval, m, u, x]
4: inP: [retval, m, u, x], outP: [retval, u, x], use: [m], def: [], in: [retval, m, u, x], out: [retval, u, x]
5: inP: [retval, u, x], outP: [retval, u, x], use: [retval, u], def: [retval], in: [retval, u, x], out: [retval, u, x]
6: inP: [retval, u], outP: [retval, u], use: [u], def: [u], in: [retval, u], out: [retval, u]
7: inP: [retval], outP: [], use: [retval], def: [], in: [retval], out: []
0: inP: [unicode], outP: [retval, unicode], use: [], def: [retval], in: [unicode], out: [retval, unicode]
1: inP: [retval, unicode], outP: [retval, u], use: [unicode], def: [u], in: [retval, unicode], out: [retval, u]
2: inP: [retval, u], outP: [retval, u, x], use: [], def: [x], in: [retval, u], out: [retval, u, x]
3: inP: [retval, u, x], outP: [retval, m, u, x], use: [x], def: [m], in: [retval, u, x], out: [retval, m, u, x]
4: inP: [retval, m, u, x], outP: [retval, u, x], use: [m], def: [], in: [retval, m, u, x], out: [retval, u, x]
5: inP: [retval, u, x], outP: [retval, u, x], use: [retval, u], def: [retval], in: [retval, u, x], out: [retval, u, x]
6: inP: [retval, u], outP: [retval, u], use: [u], def: [u], in: [retval, u], out: [retval, u]
7: inP: [retval], outP: [], use: [retval], def: [], in: [retval], out: []
0: inP: [], outP: [], use: [], def: [unicode], in: [], out: []
1: inP: [], outP: [], use: [], def: [], in: [], out: []

make output     :  
=================
make: Entering directory '/home/dominick/workspace/Compilers/cbuild'
gcc -c -o out.o out.c -g
out.c: In function ‘thefun’:
out.c:18:15: error: ‘unicode’ undeclared (first use in this function)
  u = (Object) unicode;
               ^
out.c:18:15: note: each undeclared identifier is reported only once for each function it appears in
Makefile:6: recipe for target 'out.o' failed
make: *** [out.o] Error 1
make: Leaving directory '/home/dominick/workspace/Compilers/cbuild'

expected output : NO C COMPILE
actual output   : reject
_________________________________


===== TEST PASSED: ./test/generator/3
===== TEST PASSED: ./test/generator/4
===== TEST PASSED: ./test/generator/4-2
===== TEST PASSED: ./test/generator/5-1
_________________________________

TEST FAILED     : 6

compiler output :  
=================
0: inP: [], outP: [], use: [], def: [], in: [], out: []
1: inP: [], outP: [], use: [_obj], def: [], in: [_obj], out: []
2: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [], outP: [], use: [], def: [], in: [_obj], out: [_obj]
1: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
2: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [_obj], outP: [_obj], use: [], def: [], in: [_obj], out: [_obj]
1: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
2: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [], outP: [], use: [_obj], def: [], in: [_obj], out: []
0: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
0: inP: [], outP: [], use: [t1, t2, _obj], def: [], in: [t1, t2, _obj], out: []
0: inP: [t1, t2, _obj], outP: [], use: [t1, t2, _obj], def: [], in: [t1, t2, _obj], out: []
0: inP: [], outP: [], use: [], def: [u], in: [], out: []
1: inP: [], outP: [], use: [u], def: [n], in: [u], out: []
2: inP: [], outP: [], use: [n, u], def: [], in: [n, u], out: []
0: inP: [], outP: [], use: [], def: [u], in: [], out: [u]
1: inP: [u], outP: [], use: [u], def: [n], in: [u], out: [n, u]
2: inP: [n, u], outP: [], use: [n, u], def: [], in: [n, u], out: []
0: inP: [], outP: [u], use: [], def: [u], in: [], out: [u]
1: inP: [u], outP: [n, u], use: [u], def: [n], in: [u], out: [n, u]
2: inP: [n, u], outP: [], use: [n, u], def: [], in: [n, u], out: []

make output     :  
=================
make: Entering directory '/home/dominick/workspace/Compilers/cbuild'
gcc -c -o out.o out.c -g
gcc -o a.out cubex_external_functions.o master.o out.o -g
make: Leaving directory '/home/dominick/workspace/Compilers/cbuild'

expected output : NO COMPILE
actual output   : Z
c
_________________________________


_________________________________

TEST FAILED     : 7

compiler output :  
=================
0: inP: [], outP: [], use: [], def: [], in: [], out: []
1: inP: [], outP: [], use: [l, _obj], def: [], in: [l, _obj], out: []
2: inP: [], outP: [], use: [], def: [], in: [], out: []
3: inP: [], outP: [], use: [l, _obj], def: [], in: [l, _obj], out: []
4: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [], outP: [], use: [], def: [], in: [l, _obj], out: [l, _obj]
1: inP: [l, _obj], outP: [], use: [l, _obj], def: [], in: [l, _obj], out: []
2: inP: [], outP: [], use: [], def: [], in: [l, _obj], out: [l, _obj]
3: inP: [l, _obj], outP: [], use: [l, _obj], def: [], in: [l, _obj], out: []
4: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [l, _obj], outP: [l, _obj], use: [], def: [], in: [l, _obj], out: [l, _obj]
1: inP: [l, _obj], outP: [], use: [l, _obj], def: [], in: [l, _obj], out: []
2: inP: [l, _obj], outP: [l, _obj], use: [], def: [], in: [l, _obj], out: [l, _obj]
3: inP: [l, _obj], outP: [], use: [l, _obj], def: [], in: [l, _obj], out: []
4: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [], outP: [], use: [], def: [], in: [], out: []
1: inP: [], outP: [], use: [_obj], def: [], in: [_obj], out: []
2: inP: [], outP: [], use: [], def: [], in: [], out: []
3: inP: [], outP: [], use: [_obj], def: [], in: [_obj], out: []
4: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [], outP: [], use: [], def: [], in: [_obj], out: [_obj]
1: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
2: inP: [], outP: [], use: [], def: [], in: [_obj], out: [_obj]
3: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
4: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [_obj], outP: [_obj], use: [], def: [], in: [_obj], out: [_obj]
1: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
2: inP: [_obj], outP: [_obj], use: [], def: [], in: [_obj], out: [_obj]
3: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
4: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [], outP: [], use: [], def: [], in: [], out: []
1: inP: [], outP: [], use: [_obj], def: [], in: [_obj], out: []
2: inP: [], outP: [], use: [], def: [], in: [], out: []
3: inP: [], outP: [], use: [_obj], def: [], in: [_obj], out: []
4: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [], outP: [], use: [], def: [], in: [_obj], out: [_obj]
1: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
2: inP: [], outP: [], use: [], def: [], in: [_obj], out: [_obj]
3: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
4: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [_obj], outP: [_obj], use: [], def: [], in: [_obj], out: [_obj]
1: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
2: inP: [_obj], outP: [_obj], use: [], def: [], in: [_obj], out: [_obj]
3: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
4: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [], outP: [], use: [], def: [], in: [], out: []
1: inP: [], outP: [], use: [_obj], def: [], in: [_obj], out: []
2: inP: [], outP: [], use: [], def: [], in: [], out: []
3: inP: [], outP: [], use: [_obj], def: [], in: [_obj], out: []
4: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [], outP: [], use: [], def: [], in: [_obj], out: [_obj]
1: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
2: inP: [], outP: [], use: [], def: [], in: [_obj], out: [_obj]
3: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
4: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [_obj], outP: [_obj], use: [], def: [], in: [_obj], out: [_obj]
1: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
2: inP: [_obj], outP: [_obj], use: [], def: [], in: [_obj], out: [_obj]
3: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
4: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [], outP: [], use: [], def: [], in: [], out: []
1: inP: [], outP: [], use: [_obj], def: [], in: [_obj], out: []
2: inP: [], outP: [], use: [], def: [], in: [], out: []
3: inP: [], outP: [], use: [_obj], def: [], in: [_obj], out: []
4: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [], outP: [], use: [], def: [], in: [_obj], out: [_obj]
1: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
2: inP: [], outP: [], use: [], def: [], in: [_obj], out: [_obj]
3: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
4: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [_obj], outP: [_obj], use: [], def: [], in: [_obj], out: [_obj]
1: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
2: inP: [_obj], outP: [_obj], use: [], def: [], in: [_obj], out: [_obj]
3: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
4: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [], outP: [], use: [l, _obj], def: [], in: [l, _obj], out: []
0: inP: [l, _obj], outP: [], use: [l, _obj], def: [], in: [l, _obj], out: []
0: inP: [], outP: [], use: [_obj], def: [], in: [_obj], out: []
0: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
0: inP: [], outP: [], use: [_obj], def: [], in: [_obj], out: []
0: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
0: inP: [], outP: [], use: [_obj], def: [], in: [_obj], out: []
0: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
0: inP: [], outP: [], use: [_obj], def: [], in: [_obj], out: []
0: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
0: inP: [], outP: [], use: [l, _obj], def: [], in: [l, _obj], out: []
0: inP: [l, _obj], outP: [], use: [l, _obj], def: [], in: [l, _obj], out: []
0: inP: [], outP: [], use: [_obj], def: [], in: [_obj], out: []
0: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
0: inP: [], outP: [], use: [_obj], def: [], in: [_obj], out: []
0: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
0: inP: [], outP: [], use: [_obj], def: [], in: [_obj], out: []
0: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
0: inP: [], outP: [], use: [_obj], def: [], in: [_obj], out: []
0: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
0: inP: [], outP: [], use: [], def: [ret], in: [], out: []
1: inP: [], outP: [], use: [iter], def: [c], in: [iter], out: []
2: inP: [], outP: [], use: [c, ret], def: [ret], in: [c, ret, iter], out: [iter]
3: inP: [], outP: [], use: [ret], def: [], in: [ret], out: []
0: inP: [], outP: [], use: [], def: [ret], in: [iter], out: [iter]
1: inP: [iter], outP: [], use: [iter], def: [c], in: [ret, iter], out: [c, ret, iter]
2: inP: [c, ret, iter], outP: [iter], use: [c, ret], def: [ret], in: [c, ret, iter], out: [ret, iter]
3: inP: [ret], outP: [], use: [ret], def: [], in: [ret], out: []
0: inP: [iter], outP: [iter], use: [], def: [ret], in: [iter], out: [ret, iter]
1: inP: [ret, iter], outP: [c, ret, iter], use: [iter], def: [c], in: [ret, iter], out: [c, ret, iter]
2: inP: [c, ret, iter], outP: [ret, iter], use: [c, ret], def: [ret], in: [c, ret, iter], out: [ret, iter]
3: inP: [ret], outP: [], use: [ret], def: [], in: [ret], out: []
0: inP: [iter], outP: [ret, iter], use: [], def: [ret], in: [iter], out: [ret, iter]
1: inP: [ret, iter], outP: [c, ret, iter], use: [iter], def: [c], in: [ret, iter], out: [c, ret, iter]
2: inP: [c, ret, iter], outP: [ret, iter], use: [c, ret], def: [ret], in: [c, ret, iter], out: [ret, iter]
3: inP: [ret], outP: [], use: [ret], def: [], in: [ret], out: []
0: inP: [], outP: [], use: [], def: [str], in: [], out: []
1: inP: [], outP: [], use: [input], def: [i], in: [input], out: []
2: inP: [], outP: [], use: [i, str], def: [str], in: [i, str, input], out: [input]
3: inP: [], outP: [], use: [str], def: [], in: [str], out: []
0: inP: [], outP: [], use: [], def: [str], in: [input], out: [input]
1: inP: [input], outP: [], use: [input], def: [i], in: [str, input], out: [i, str, input]
2: inP: [i, str, input], outP: [input], use: [i, str], def: [str], in: [i, str, input], out: [str, input]
3: inP: [str], outP: [], use: [str], def: [], in: [str], out: []
0: inP: [input], outP: [input], use: [], def: [str], in: [input], out: [str, input]
1: inP: [str, input], outP: [i, str, input], use: [input], def: [i], in: [str, input], out: [i, str, input]
2: inP: [i, str, input], outP: [str, input], use: [i, str], def: [str], in: [i, str, input], out: [str, input]
3: inP: [str], outP: [], use: [str], def: [], in: [str], out: []
0: inP: [input], outP: [str, input], use: [], def: [str], in: [input], out: [str, input]
1: inP: [str, input], outP: [i, str, input], use: [input], def: [i], in: [str, input], out: [i, str, input]
2: inP: [i, str, input], outP: [str, input], use: [i, str], def: [str], in: [i, str, input], out: [str, input]
3: inP: [str], outP: [], use: [str], def: [], in: [str], out: []

make output     :  
=================
make: Entering directory '/home/dominick/workspace/Compilers/cbuild'
gcc -c -o out.o out.c -g
gcc -o a.out cubex_external_functions.o master.o out.o -g
make: Leaving directory '/home/dominick/workspace/Compilers/cbuild'

expected output : NO COMPILE
actual output   : NO COMPILE
_________________________________


_________________________________

TEST FAILED     : 8

compiler output :  
=================
Parser error

make output     :  
=================
make: Entering directory '/home/dominick/workspace/Compilers/cbuild'
gcc -c -o out.o out.c -g
gcc -o a.out cubex_external_functions.o master.o out.o -g
make: Leaving directory '/home/dominick/workspace/Compilers/cbuild'

expected output : z
y
x
w
v
u
t
s
r
q
p
o
n
m
l
k
j
i
h
g
f
e
d
c
b
a

actual output   : reject
_________________________________


_________________________________

TEST FAILED     : 9

compiler output :  
=================
0: inP: [], outP: [], use: [], def: [], in: [], out: []
1: inP: [], outP: [], use: [_obj], def: [], in: [_obj], out: []
2: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [], outP: [], use: [], def: [], in: [_obj], out: [_obj]
1: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
2: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [_obj], outP: [_obj], use: [], def: [], in: [_obj], out: [_obj]
1: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
2: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [], outP: [], use: [], def: [], in: [], out: []
1: inP: [], outP: [], use: [_obj], def: [], in: [_obj], out: []
2: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [], outP: [], use: [], def: [], in: [_obj], out: [_obj]
1: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
2: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [_obj], outP: [_obj], use: [], def: [], in: [_obj], out: [_obj]
1: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
2: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [], outP: [], use: [], def: [], in: [], out: []
1: inP: [], outP: [], use: [_obj], def: [], in: [_obj], out: []
2: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [], outP: [], use: [], def: [], in: [_obj], out: [_obj]
1: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
2: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [_obj], outP: [_obj], use: [], def: [], in: [_obj], out: [_obj]
1: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
2: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [], outP: [], use: [], def: [], in: [], out: []
1: inP: [], outP: [], use: [_obj], def: [], in: [_obj], out: []
2: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [], outP: [], use: [], def: [], in: [_obj], out: [_obj]
1: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
2: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [_obj], outP: [_obj], use: [], def: [], in: [_obj], out: [_obj]
1: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
2: inP: [], outP: [], use: [], def: [], in: [], out: []
0: inP: [], outP: [], use: [_obj], def: [], in: [_obj], out: []
0: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
0: inP: [], outP: [], use: [_obj], def: [], in: [_obj], out: []
0: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
0: inP: [], outP: [], use: [_obj], def: [], in: [_obj], out: []
0: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
0: inP: [], outP: [], use: [_obj], def: [], in: [_obj], out: []
0: inP: [_obj], outP: [], use: [_obj], def: [], in: [_obj], out: []
0: inP: [], outP: [], use: [s1, s2], def: [], in: [s1, s2], out: []
0: inP: [s1, s2], outP: [], use: [s1, s2], def: [], in: [s1, s2], out: []
0: inP: [], outP: [], use: [b], def: [], in: [b], out: []
0: inP: [b], outP: [], use: [b], def: [], in: [b], out: []
0: inP: [], outP: [], use: [a], def: [], in: [a], out: []
0: inP: [a], outP: [], use: [a], def: [], in: [a], out: []
0: inP: [], outP: [], use: [], def: [branch], in: [], out: []
1: inP: [], outP: [], use: [branch], def: [], in: [branch], out: []
0: inP: [], outP: [], use: [], def: [branch], in: [], out: [branch]
1: inP: [branch], outP: [], use: [branch], def: [], in: [branch], out: []
0: inP: [], outP: [branch], use: [], def: [branch], in: [], out: [branch]
1: inP: [branch], outP: [], use: [branch], def: [], in: [branch], out: []

make output     :  
=================
make: Entering directory '/home/dominick/workspace/Compilers/cbuild'
gcc -c -o out.o out.c -g
gcc -o a.out cubex_external_functions.o master.o out.o -g
make: Leaving directory '/home/dominick/workspace/Compilers/cbuild'

expected output : NO COMPILE
actual output   :   
_________________________________


===== TEST PASSED: ./test/generator/x3_test1
===== TEST PASSED: ./test/generator/x3_test2
===== TEST PASSED: ./test/generator/x3_test3
===== TEST PASSED: ./test/generator/x3_test4
===== TEST PASSED: ./test/generator/x3_test5
