
Class Math(){

	null = 0;

	super();

	fun pow(a : Integer<>, n : Integer<>) : Integer<>
	{
		return 0;
	}
	
}

`
# A bad random number generator
Class Random(seed : Integer<>){
	super();

	s := seed % 9;
	m := Math();

	fun setSeed(seed : Integer<>) : Boolean<>
	{
		s := seed;
		return true;
	}

	# returns random number between 1 and 10
	fun getRandInt() : Integer<>
	{
		s := m.pow(s,7) % 10;
		return m.pow(s,s % 4) % 9 + 1;
	}

	fun getRandBool() : Integer<>
	{
		r := getRandInt();
		ret := False;
		if(r % 2 == 0){
			ret := True;
		}
		return ret;
	}

}

# A very bad random number generator
Class Random2(){
	super();

	a := 0;
	b := False;

	# returns in range of all integers with perfect balance
	fun getRandInt() : Integer<>
	{
		a := a + 1;
		return a;
	}

	# always returns True and False equally
	fun getRandBool() : Boolean<>
	{
		b := !b;
		return b;
	}
}

# A very very bad random number generator
Class Random3(){
	super();

	fun getRandInt() : Integer<>
	{
		# 4 chosen at random
		# -> always returns a random number
		return 4;
	}

	fun getRandBool() : Boolean<>
	{
		# False chosen at random
		return False;
	}
}

Class CSMajor(){
	super();

	n := "";
	g := "";

	# not initialized until getGPA() is called
	gpa := -1;

	# RNG
	rand := Random();

	fun getSleep() : Integer<>
	{
		allNighter := rand.getRandBool();
		if(allNighter){
			return 0;
		}else{
			return rand.getRandInt();
		}
	}

	# returns GPA in 1/10ths (27 ~= 2.7)
	fun getGPA() : Integer<>
	{
		if(gpa > -1){
			return gpa;
		}else{
			ret := 27;
			if(rand.getRandBool()){
				while(ret < 43 & rand.getRandBool()){
					ret := ret + 1;
				}
			}else{
				while(ret > 10 & rand.getRandBool()){
					ret := ret - 1;
				}
			}
			return ret;
		}	
	}

	# a manual override... A+s for all!!
	fun setGPA(newGpa : Integer<>) : Nothing<>
	{
		gpa := newGpa;
		return Nothing;
	}

	fun hasFriends() : Boolean<>
	{
		return(rand.getRandBool() & rand.getRandBool() & rand.getRandBool() & rand.getRandBool());
	}

	fun getGender() : Boolean<>
	{
		if(g != ""){
			return g;
		}else{
			if(rand.getRandBool() | rand.getRandBool() | rand.getRandBool() | rand.getRandBool()){
				return "M";
			}else{
				return "F";
			}
		}
	}

	fun setGender(gender : String) : Boolean<>
	{
		if(gender == "M" | gender == "F"){
			g := gender;
			return True;
		}else{
			return False;
		}
	}

	fun setName(name : String<>) : Nothing<>
	{
		n := name;
		return Nothing;
	}
	fun getName() : String<>
	{
		return n;
	}

}

# makes a line of length l of CS majors doing the Mambo
Class MamboLine(l : Integer)
{
	super();

	length := l-1;

	line := [CSMajor()];

	while(l > 1){
		line := line ++ CSMajor();
	}

	fun addRandMember() : Iterable<CSMajor<>>
	{
		l := l ++ CSMajor();
		length := length + 1;
		return l;
	}

	fun addMember(person : CSMajor<>) : Iterable<CSMajor<>>
	{
		l := l ++ person;
		length := length + 1;
		return l;
	}

	fun getMember(n : Integer<>) : CSMajor<>
	{
		i := 0;
		for(p in l){
			i := i + 1;
			if(i == n){
				return p;
			}
		}

		#failure... gets a new person and adds it to the line
		newPerson := CSMajor();
		addMember(newPerson);
		return newPerson;

	}
}

line := MamboLine(34);

mandy := CSMajor();
mandy.setName("Mandy");
mandy.setGender("F");
mandy.setGPA(44);
line := line.addMember(mandy);

# return line.getMember(35).hasFriends();
'

return ["sup"];